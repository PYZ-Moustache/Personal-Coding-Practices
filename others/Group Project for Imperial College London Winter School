#!/usr/bin/env python
# coding: utf-8

# # Image Classification using Convolutional Neural Networks in PyTorch
# This tutorial series is a hands-on beginner-friendly introduction to deep learning using [PyTorch](https://pytorch.org), an open-source neural networks library. These tutorials take a practical and coding-focused approach. The best way to learn the material is to execute the code and experiment with it yourself.
# 

# This tutorial covers the following topics: 
# 
# - Understanding convolution and pooling layers
# - Creating a convolutional neural network (CNN) using PyTorch
# - Training a CNN from scratch and monitoring performance
# - Underfitting, overfitting and how to overcome them

# ### How to run the code
# 
# You can _run_ this tutorial and experiment with the code examples in a couple of ways: *using free online resources* (recommended) or *on your computer*.
# 
# #### Option 1: Running using free online resources (1-click, recommended)
# 
# The easiest way to start executing the code is to click the **Run** button at the top of this page and select **Run on Colab**. [Google Colab](https://colab.research.google.com) is a free online platform for running Jupyter notebooks using Google's cloud infrastructure.
# 
# 
# #### Option 2: Running on your computer locally
# 
# To run the code on your computer locally, you'll need to set up [Python](https://www.python.org), download the notebook and install the required libraries. We recommend using the [Conda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/) distribution of Python. Click the **Run** button at the top of this page, select the **Run Locally** option, and follow the instructions.

# ## Exploring the CIFAR10 Dataset
# 
# In this tutorial, we'll use the 10% CIFAR10 dataset, which consists of 6000 32x32 px colour images in 10 classes. Here are some sample images from the dataset:
# 
# <img src="https://miro.medium.com/max/709/1*LyV7_xga4jUHdx4_jHk1PQ.png" style="max-width:480px">
# 

# In[1]:


# Uncomment and run the appropriate command for your operating system, if required

# Linux / Binder / Windows (No GPU)
# !pip install numpy matplotlib torch==1.7.0+cpu torchvision==0.8.1+cpu torchaudio==0.7.0 -f https://download.pytorch.org/whl/torch_stable.html

# Linux / Windows (GPU)
# pip install torch==1.7.1+cu110 torchvision==0.8.2+cu110 torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html
 
# MacOS (NO GPU)
# !pip install numpy matplotlib torch torchvision torchaudio


# In[2]:


import os
import torch
import torchvision
import tarfile
from torchvision.datasets.utils import download_url
from torch.utils.data import random_split


# In[3]:


project_name='Machine Learning #Assignment 6'


# The dataset is in the directory `data/cifar10`. It contains 2 folders `train` and `test`, containing the training set (5000 images) and test set (1000 images) respectively. Each of them contains 10 folders, one for each class of images. Let's verify this using `os.listdir`.

# In[4]:


data_dir = 'data/cifar10'
print(os.listdir(data_dir))
classes = os.listdir(data_dir + "/train")
print(classes)


# The above directory structure (one folder per class) is used by many computer vision datasets, and most deep learning libraries provide utilites for working with such datasets. We can use the `ImageFolder` class from `torchvision` to load the data as PyTorch tensors.

# In[5]:


from torchvision.datasets import ImageFolder
from torchvision.transforms import ToTensor
import torchvision.transforms as transforms


# In[6]:


#鍥剧墖棰勫鐞嗭紝鍑忓皬杩囨嫙鍚堥闄?
train_transform = transforms.Compose([
    transforms.ToPILImage(),
    transforms.RandomHorizontalFlip(),  # 闅忔満灏嗗浘鐗囨按骞崇炕杞?
    transforms.ToTensor(),  # 灏嗗浘鐗囪浆鎴? Tensor, 骞舵妸鏁板?糿ormalize鍒癧0,1](data normalization)
])
test_transform = transforms.Compose([
    transforms.ToPILImage(),
    transforms.ToTensor(),
])
train_ds = torchvision.datasets.CIFAR10(root='/data', train=True, transform=train_transform, download=True)
val_ds = torchvision.datasets.CIFAR10(root='/data', train=False, transform=test_transform, download=True)


# In[7]:


transform_list = [
    transforms.RandomHorizontalFlip(),
    transforms.RandomCrop((32,32)),
    transforms.ToTensor(),
]
 
transform_compose = transforms.Compose(transform_list)
dataset = ImageFolder(data_dir+'/train', transform=transform_compose)


# Let's look at a sample element from the training dataset. Each element is a tuple, containing a image tensor and a label. Since the data consists of 32x32 px color images with 3 channels (RGB), each image tensor has the shape `(3, 32, 32)`.

# In[8]:


img, label = dataset[4999]
print(img.shape, label)
img


# The list of classes is stored in the `.classes` property of the dataset. The numeric label for each element corresponds to index of the element's label in the list of classes.

# In[9]:


print(dataset.classes)


# We can view the image using `matplotlib`, but we need to change the tensor dimensions to `(32,32,3)`. Let's create a helper function to display an image and its label.

# In[10]:


import matplotlib
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

matplotlib.rcParams['figure.facecolor'] = '#ffffff'


# In[11]:


def show_example(img, label):
    print('Label: ', dataset.classes[label], "("+str(label)+")")
    plt.imshow(img.permute(1, 2, 0))


# Let's look at a couple of images from the dataset. As you can tell, the 32x32px images are quite difficult to identify, even for the human eye. Try changing the indices below to view different images.

# In[12]:


show_example(*dataset[123])


# In[13]:


show_example(*dataset[4554])


# ## Training and Validation Datasets
# 
# While building real world machine learning models, it is quite common to split the dataset into 3 parts:
# 
# 1. **Training set** - used to train the model i.e. compute the loss and adjust the weights of the model using gradient descent.
# 2. **Validation set** - used to evaluate the model while training, adjust hyperparameters (learning rate etc.) and pick the best version of the model.
# 3. **Test set** - used to compare different models, or different types of modeling approaches, and report the final accuracy of the model.
# 
# Since there's no predefined validation set, we can set aside a small portion (5000 images) of the training set to be used as the validation set. We'll use the `random_split` helper method from PyTorch to do this. To ensure that we always create the same validation set, we'll also set a seed for the random number generator.

# In[14]:


random_seed = 42
torch.manual_seed(random_seed);


# In[15]:


val_size = 500
train_size = len(dataset) - val_size

train_ds, val_ds = random_split(dataset, [train_size, val_size])
len(train_ds), len(val_ds)


# We can now create data loaders for training and validation, to load the data in batches

# In[16]:


from torch.utils.data.dataloader import DataLoader

batch_size=64


# In[17]:


'''generate dataloader of train and validation, named train_dl and val_dl respectively'''
#numworker璁剧疆? batch_size璁剧疆?
train_dl = torch.utils.data.DataLoader(train_ds, batch_size=32,shuffle=True, num_workers=1)
val_dl = torch.utils.data.DataLoader(val_ds, batch_size=32,shuffle=False, num_workers=1)


# We can look at batches of images from the dataset using the `make_grid` method from `torchvision`. Each time the following code is run, we get a different bach, since the sampler shuffles the indices before creating batches.

# In[18]:


from torchvision.utils import make_grid

def show_batch(dl):
    for images, labels in dl:
        fig, ax = plt.subplots(figsize=(12, 6))
        ax.set_xticks([]); ax.set_yticks([])
        ax.imshow(make_grid(images, nrow=16).permute(1, 2, 0))
        break


# In[19]:


show_batch(train_dl)


# In[20]:


show_batch(val_dl)


# ## Defining the Model (Convolutional Neural Network)
# 
# In this tutorial however, we will use a convolutional neural network, using the `nn.Conv2d` class from PyTorch.
# 
# > The 2D convolution is a fairly simple operation at heart: you start with a kernel, which is simply a small matrix of weights. This kernel 鈥渟lides鈥? over the 2D input data, performing an elementwise multiplication with the part of the input it is currently on, and then summing up the results into a single output pixel. - [Source](https://towardsdatascience.com/intuitively-understanding-convolutions-for-deep-learning-1f6f42faee1)
# 
# <img src="https://miro.medium.com/max/1070/1*Zx-ZMLKab7VOCQTxdZ1OAw.gif" style="max-width:400px;">
# 
# 
# Let us implement a convolution operation on a 1 channel image with a 3x3 kernel.

# In[21]:


import numpy as np
def apply_kernel(image, kernel):
    '''write the function of apply_kernel'''
    #鍗风Н杩愮畻
    N = image.shape[0]          # 鍥剧墖杈归暱
    F,E = kernel.shape          # filter
    L = int(N-F) + 1            # 杈撳嚭缁撴灉杈归暱
    res = np.zeros([L, L],np.float32)
    for row in range(0, L):
        for column in range(0, L):
            for kernel_i in range(0,F):
                for kernel_j in range(0,E):
                    res[row][column] += image[row + kernel_i][column + kernel_j] * kernel[kernel_i][kernel_j]
    print(res)
    pass


# In[22]:


sample_image = torch.tensor([
    [3, 3, 2, 1, 0], 
    [0, 0, 1, 3, 1], 
    [3, 1, 2, 2, 3], 
    [2, 0, 0, 2, 2], 
    [2, 0, 0, 0, 1]
], dtype=torch.float32)

sample_kernel = torch.tensor([
    [0, 1, 2], 
    [2, 2, 0], 
    [0, 1, 2]
], dtype=torch.float32)

apply_kernel(sample_image, sample_kernel)


# For multi-channel images, a different kernel is applied to each channels, and the outputs are added together pixel-wise. 
# 
# There are certain advantages offered by convolutional layers when working with image data:
# 
# * **Fewer parameters**: A small set of parameters (the kernel) is used to calculate outputs of the entire image, so the model has much fewer parameters compared to a fully connected layer. 
# * **Sparsity of connections**: In each layer, each output element only depends on a small number of input elements, which makes the forward and backward passes more efficient.
# * **Parameter sharing and spatial invariance**: The features learned by a kernel in one part of the image can be used to detect similar pattern in a different part of another image.
# 
# We will also use a [max-pooling](https://computersciencewiki.org/index.php/Max-pooling_/_Pooling) layers to progressively decrease the height & width of the output tensors from each convolutional layer.
# 
# <img src="https://computersciencewiki.org/images/8/8a/MaxpoolSample2.png" style="max-width:400px;">
# 
# Before we define the entire model, let's look at how a single convolutional layer followed by a max-pooling layer operates on the data.

# In[23]:


import torch.nn as nn
import torch.nn.functional as F


# In[24]:


simple_model = nn.Sequential(
    nn.Conv2d(3, 8, kernel_size=3, stride=1, padding=1),
    nn.MaxPool2d(2, 2)
)


# Refer to [Sylvian's post](https://sgugger.github.io/convolution-in-depth.html) for an explanation of `kernel_size`, `stride` and `padding`.    

# In[25]:


for images, labels in train_dl:
    print('images.shape:', images.shape)
    '''write the out value'''
    out=simple_model(images)
    print('out.shape:', out.shape)
    break


# The `Conv2d` layer transforms a 3-channel image to a 16-channel *feature map*, and the `MaxPool2d` layer halves the height and width. The feature map gets smaller as we add more layers, until we are finally left with a small feature map, which can be flattened into a vector. We can then add some fully connected layers at the end to get vector of size 10 for each image.
# 
# <img src="https://i.imgur.com/KKtPOKE.png" style="max-width:540px">
# 
# Let's define the model by extending an `ImageClassificationBase` class which contains helper methods for training & validation.

# In[26]:


class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch 
        '''write the generation of predictions and the entropy loss'''
        out = self(images)                  
        loss = F.cross_entropy(out, labels) 
        x, train_predict = torch.max(out.data, 1)
        correct=(train_predict==labels.data).sum()
        return loss,correct
    
    def validation_step(self, batch):
        images, labels = batch 
        '''write the generation of predictions and the entropy loss, and the accuracy'''
        out = self(images)                    
        loss = F.cross_entropy(out, labels)   
        acc = accuracy(out, labels)      
        return {'val_loss': loss.detach(), 'val_acc': acc}
        
    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}
    
    def epoch_end(self, epoch, result):
        print("Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['train_loss'], result['val_loss'], result['val_acc']))
        
def accuracy(outputs, labels):
    '''write the function of accuracy'''
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))
    pass


# 
# We'll use `nn.Sequential` to chain the layers and activations functions into a single network architecture.

# In[27]:


class Cifar10CnnModel(ImageClassificationBase):
    def __init__(self):
        super().__init__()
        self.network = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1), #bs*16*16*16
            nn.ReLU(),
            nn.Conv2d(32, 64, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2), # output: 64 x 16 x 16

            nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(128, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2), # output: 128 x 8 x 8

            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2), # output: 256 x 4 x 4

            nn.Flatten(), 
            nn.Linear(4096,1024),
            nn.ReLU(),
            nn.Linear(1024, 512),
            nn.ReLU(),
            nn.Linear(512,10)
        )
        
    def forward(self,xb):
        return self.network(xb)


# In[28]:


model = Cifar10CnnModel()
model


# Let's verify that the model produces the expected output on a batch of training data. The 10 outputs for each image can be interpreted as probabilities for the 10 target classes (after applying softmax), and the class with the highest probability is chosen as the label predicted by the model for the input image.

# In[29]:


for images, labels in train_dl:
    print('images.shape:', images.shape)
    out = model(images)
    print('out.shape:', out.shape)
    print('out[0]:', out[0])
    print("MAX",torch.max(out[0]))
    print(dataset.classes)
    show_example(images[0],labels[0])
    break


# To seamlessly use a GPU, if one is available, we define a couple of helper functions (`get_default_device` & `to_device`) and a helper class `DeviceDataLoader` to move our model & data to the GPU as required. These are described in more detail in the [previous tutorial](https://jovian.ml/aakashns/04-feedforward-nn#C21).

# In[30]:


def get_default_device():
    """Pick GPU if available, else CPU"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')
    
def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device
        
    def __iter__(self):
        """Yield a batch of data after moving it to device"""
        for b in self.dl: 
            yield to_device(b, self.device)

    def __len__(self):
        """Number of batches"""
        return len(self.dl)


# Based on where you're running this notebook, your default device could be a CPU (`torch.device('cpu')`) or a GPU (`torch.device('cuda')`)

# In[31]:


device = get_default_device()
device


# We can now wrap our training and validation data loaders using `DeviceDataLoader` for automatically transferring batches of data to the GPU (if available), and use `to_device` to move our model to the GPU (if available).

# In[32]:


train_dl = DeviceDataLoader(train_dl, device)
val_dl = DeviceDataLoader(val_dl, device)
to_device(model, device);


# ## Training the Model
# 
# We'll define two functions: `fit` and `evaluate` to train the model using gradient descent and evaluate its performance on the validation set. 

# In[33]:


@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):
    history = []
    optimizer = opt_func(model.parameters(), lr=0.001, weight_decay=1e-5)
    for epoch in range(epochs):
        # Training Phase 
        model.train()
        train_losses = []
        train_correct= 0
        trainnum = 0
        for batch in train_loader:
            '''Calculate the loss, and complete the train_losses'''
            loss,correct=model.training_step(batch)
            train_losses.append(loss)
            train_correct=train_correct+correct
            trainnum+=32
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()
        acc=train_correct/trainnum*100
        print("璁粌鍑嗙‘鐜囷細",acc)
        # Validation phase
        result = evaluate(model, val_loader)
        result['train_acc']=acc/100
        result['train_loss'] = torch.stack(train_losses).mean().item()
        model.epoch_end(epoch, result)
        history.append(result)
    return history


# Before we begin training, let's instantiate the model once again and see how it performs on the validation set with the initial set of parameters.

# In[34]:


model = to_device(Cifar10CnnModel(), device)
num_epochs = 100
opt_func = torch.optim.Adam
lr = 0.001
history = fit(num_epochs, lr, model, train_dl, val_dl, opt_func)


# We can plot the valdation set accuracies to study how the model improves over time.

# In[35]:


def plot_accuracies(history):
    accuracies = [x['val_acc'] for x in history]
    '''plot the accuracy'''
    train_acc=  [x['train_acc'] for x in history]
    plt.plot(range(num_epochs),train_acc,c='b')
    plt.plot(range(num_epochs),accuracies,c='r')


# In[36]:


plot_accuracies(history)


# Our model reaches an accuracy of around 75%, and by looking at the graph, it seems unlikely that the model will achieve an accuracy higher than 80% even after training for a long time. This suggests that we might need to use a more powerful model to capture the relationship between the images and the labels more accurately. This can be done by adding more convolutional layers to our model, or incrasing the no. of channels in each convolutional layer, or by using regularization techniques.
# 
# We can also plot the training and validation losses to study the trend.

# In[37]:


def plot_losses(history):
    '''plot the train_losses and val_losses'''
    train_loss= [x['train_loss'] for x in history]
    val_loss = [x['val_loss'] for x in history]
    plt.plot(range(num_epochs),train_loss,c='b')
    plt.plot(range(num_epochs),val_loss,c='r')


# In[38]:


plot_losses(history)


# Initialy, both the training and validation losses seem to decrease over time. However, if you train the model for long enough, you will notice that the training loss continues to decrease, while the validation loss stops decreasing, and even starts to increase after a certain point! 
# 
# <img src="https://i.stack.imgur.com/1QU0m.png" style="max-width:400px;">
# 
# This phenomenon is called **overfitting**, and it is the no. 1 why many machine learning models give rather terrible results on real-world data. It happens because the model, in an attempt to minimize the loss, starts to learn patters are are unique to the training data, sometimes even memorizing specific training examples. Because of this, the model does not generalize well to previously unseen data.
# 
# 
# Following are some common stragegies for avoiding overfitting:
# 
# - Gathering and generating more training data, or adding noise to it
# - Using regularization techniques like batch normalization & dropout
# - Early stopping of model's training, when validation loss starts to increase

# ## Testing with individual images
# 
# While we have been tracking the overall accuracy of a model so far, it's also a good idea to look at model's results on some sample images. Let's test out our model with some images from the predefined test dataset of 10000 images. We begin by creating a test dataset using the `ImageFolder` class.
# 
# 

# In[39]:


classes=['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']


# Let's define a helper function `predict_image`, which returns the predicted label for a single image tensor.

# In[51]:


def predict_image(img, model):
    '''write the function of predict_image'''
    # Convert to a batch of 1
    xb = to_device(img.unsqueeze(0), device)
    # Get predictions from model
    out=model(xb)
    # Pick index with highest probability
    # Retrieve the class label
    max=torch.max(out,-1)[1]
    return classes[max]


# In[52]:


img, label = val_ds[0]
plt.imshow(img.permute(1, 2, 0))
print('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))


# In[58]:


img, label = val_ds[100]
plt.imshow(img.permute(1, 2, 0))
print('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))


# In[54]:


img, label = val_ds[2]
plt.imshow(img.permute(1, 2, 0))
print('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))


# In[65]:


img, label = val_ds[20]
plt.imshow(img.permute(1, 2, 0))
print('Label:', dataset.classes[label], ', Predicted:', predict_image(img, model))


# In[45]:


test_dataset = ImageFolder(data_dir+'/test', transform=ToTensor())


# Identifying where our model performs poorly can help us improve the model, by collecting more training data, increasing/decreasing the complexity of the model, and changing the hypeparameters.
# 
# As a final step, let's also look at the overall loss and accuracy of the model on the test set. We expect these values to be similar to those for the validation set. If not, we might need a better validation set that has similar data and distribution as the test set (which often comes from real world data).

# In[70]:


@torch.no_grad()
def output_step(model, batch):
    '''write the function of output_step'''
    images,labels=batch
    outputs=model(images)
    predict=[]
    for i in range(len(labels)):
        pre=torch.max(outputs[i],-1)[1]
        predict.append(pre.item())
    return predict


# In[89]:


test_loader = DeviceDataLoader(DataLoader(test_dataset, batch_size*2), device)
outputs=[]
for batch in test_loader:
    outputs.extend(output_step(model,batch))

print(outputs)


# In[90]:


'''save the test_target'''
import pandas as pd
dp1=pd.DataFrame(outputs)
dp1.to_csv("./data/test_target.csv")


# ## Saving and loading the model
# 
# Since we've trained our model for a long time and achieved a resonable accuracy, it would be a good idea to save the weights of the model to disk, so that we can reuse the model later and avoid retraining from scratch. Here's how you can save the model.

# In[85]:


'''save the parameters of model'''
torch.save(model, 'model.pth')


# ## Summary and Further Reading/Exercises
# 
# We've covered a lot of ground in this tutorial. Here's quick recap of the topics:
# * Introduction to the CIFAR10 dataset for image classification
# * Downloading, extracing and loading an image dataset using `torchvision`
# * Show random batches of images in a grid using `torchvision.utils.make_grid`
# * Creating a convolutional neural network using with `nn.Conv2d` and `nn.MaxPool2d` layers
# * Training a convolutional neural network and visualizing the losses and errors
# * Understanding overfitting and the strategies for avoiding it (more on this later)
# * Generating predictions on single images from the test set
