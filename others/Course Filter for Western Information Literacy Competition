import pandas as pd
import tkinter as tk
from tkinter import messagebox

# 读取Excel表格数据
excel_file = 'data set.xlsx'
data = pd.read_excel(excel_file)

# 创建GUI界面
root = tk.Tk()
root.title("Course Filter")

# 定义筛选函数
def filter_courses():
    course_keyword = course_entry.get().strip().upper()
    country = country_entry.get().strip().upper()
    course_type = type_entry.get().strip().capitalize()
    start_time = start_time_entry.get().strip()
    end_time = end_time_entry.get().strip()
    max_tuition = max_tuition_entry.get().strip()

    filtered_data = data
    if course_keyword:
        filtered_data = filtered_data[filtered_data['Course'].str.upper().str.contains(course_keyword)]
    if country:
        filtered_data = filtered_data[filtered_data['Country'].str.upper() == country]
    if course_type and course_type not in ['On-site', 'Online']:
        messagebox.showerror("错误", "课程类型只能为On-site或Online。")
        return
    elif course_type:
        filtered_data = filtered_data[filtered_data['Type'].str.capitalize() == course_type]
    if start_time:
        filtered_data = filtered_data[pd.to_datetime(filtered_data['Start Time']).dt.date >= pd.to_datetime(start_time).date()]
    if end_time:
        filtered_data = filtered_data[pd.to_datetime(filtered_data['End Time']).dt.date <= pd.to_datetime(end_time).date()]
    if max_tuition:
        filtered_data = filtered_data[filtered_data['Tuition in CNY'] <= float(max_tuition)]

    # 显示筛选结果
    result_text.config(state=tk.NORMAL)
    result_text.delete(1.0, tk.END)

    if not filtered_data.empty:
        bold_font = ("Arial", 10, "bold")
        normal_font = ("Arial", 10)
        for index, row in enumerate(filtered_data.iterrows(), start=1):
            course_name = row[1]['Course']
            course_info = "\n".join([f"{key}: {value}" for key, value in row[1].items() if key != 'Course'])
            result_text.insert(tk.END, f"{index}. ", "normal")
            result_text.insert(tk.END, course_name, "bold")
            result_text.insert(tk.END, f"\n{course_info}\n\n", "normal")
    else:
        result_text.insert(tk.END, "没有符合条件的课程。")
    result_text.config(state=tk.DISABLED)

# 创建界面组件
course_label = tk.Label(root, text="Course Keyword:")
course_label.pack()
course_entry = tk.Entry(root)
course_entry.pack()

country_label = tk.Label(root, text="Country:")
country_label.pack()
country_entry = tk.Entry(root)
country_entry.pack()

type_label = tk.Label(root, text="Type (On-site/Online):")
type_label.pack()
type_entry = tk.Entry(root)
type_entry.pack()

start_time_label = tk.Label(root, text="Earliest Start Time (YYYY-MM-DD):")
start_time_label.pack()
start_time_entry = tk.Entry(root)
start_time_entry.pack()

end_time_label = tk.Label(root, text="Latest End Time (YYYY-MM-DD):")
end_time_label.pack()
end_time_entry = tk.Entry(root)
end_time_entry.pack()

max_tuition_label = tk.Label(root, text="Maximum Tuition in CNY:")
max_tuition_label.pack()
max_tuition_entry = tk.Entry(root)
max_tuition_entry.pack()

filter_button = tk.Button(root, text="Filter Courses", command=filter_courses)
filter_button.pack()

result_text = tk.Text(root, height=20, width=100, state=tk.DISABLED)
result_text.pack()

# 设置tag，用于不同字体样式
result_text.tag_configure("bold", font=("Arial", 10, "bold"))
result_text.tag_configure("normal", font=("Arial", 10))

# 启动主循环
root.mainloop()
